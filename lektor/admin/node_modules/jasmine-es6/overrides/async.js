'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = install;

var _parseArgs2 = require('jasmine-es6/lib/parse-args');

var _parseArgs3 = _interopRequireDefault(_parseArgs2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fnNames = ['beforeAll', 'afterAll', 'beforeEach', 'afterEach', 'it', 'fit'];

function wrap(jasmineFn) {
  return function wrapped() {
    var newCallback = function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(done) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return (0, _apply2.default)(callback, this, [done]);

              case 3:
                /* eslint-enable lines-around-comment, no-invalid-this */
                done();
                _context.next = 9;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context['catch'](0);

                done.fail(_context.t0);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 6]]);
      }));

      return function newCallback(_x) {
        return _ref.apply(this, arguments);
      };
    }();

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _parseArgs = (0, _parseArgs3.default)(args, { title: String, callback: Function, timeout: Number }, ['title', 'callback'], ['title', 'callback', 'timeout'], ['callback'], ['callback', 'timeout']);

    var title = _parseArgs.title;
    var callback = _parseArgs.callback;
    var timeout = _parseArgs.timeout;


    return jasmineFn.apply(undefined, (0, _toConsumableArray3.default)([title, newCallback, timeout].filter(Boolean)));
  };
}

var installed = false;
function install() {
  var env = arguments.length <= 0 || arguments[0] === undefined ? global : arguments[0];

  if (installed) {
    return;
  }
  installed = true;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(fnNames), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var fnName = _step.value;

      env[fnName] = wrap(env[fnName]);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}