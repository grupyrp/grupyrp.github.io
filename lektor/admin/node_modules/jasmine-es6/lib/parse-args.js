'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.default = parseArgs;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function type(value) {
  if (typeof value === 'boolean') {
    return Boolean;
  } else if (typeof value === 'number') {
    return Number;
  } else if (typeof value === 'string') {
    return String;
  } else if (typeof value === 'function') {
    return Function;
  } else if (Array.isArray(value)) {
    return Array;
  }

  return Object;
}

function matchSignature(args, variables, signature) {
  return signature.length === args.length && signature.every(function (name, index) {
    return variables[name] === type(args[index]);
  });
}

function findSignature(args, variables, signatures) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(signatures), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var signature = _step.value;

      if (matchSignature(args, variables, signature)) {
        return signature;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

function parseArgs(args, variables) {
  for (var _len = arguments.length, signatures = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    signatures[_key - 2] = arguments[_key];
  }

  var signature = findSignature(args, variables, signatures);
  return signature ? signature.reduce(function (parsedArgs, name, index) {
    return (0, _assign2.default)(parsedArgs, (0, _defineProperty3.default)({}, name, args[index]));
  }, {}) : {};
}