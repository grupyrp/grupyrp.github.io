'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nodePromiseEs = require('node-promise-es6');

var _fsExtraPromiseEs = require('fs-extra-promise-es6');

var fse = _interopRequireWildcard(_fsExtraPromiseEs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Directory = function () {
  function Directory() {
    (0, _classCallCheck3.default)(this, Directory);

    this.path = _path2.default.resolve.apply(_path2.default, arguments);

    /* eslint-disable */
    _nodePromiseEs.fs.readdirSync(this.path);
    /* eslint-enable */
  }

  (0, _createClass3.default)(Directory, [{
    key: 'join',
    value: function join() {
      for (var _len = arguments.length, joinPaths = Array(_len), _key = 0; _key < _len; _key++) {
        joinPaths[_key] = arguments[_key];
      }

      return _path2.default.resolve.apply(_path2.default, [this.path].concat(joinPaths));
    }
  }, {
    key: 'execSh',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(command) {
        var child;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _nodePromiseEs.childProcess.exec(command, { cwd: this.path });

              case 2:
                child = _context.sent;
                return _context.abrupt('return', child.stdout.trim());

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execSh(_x) {
        return _ref.apply(this, arguments);
      }

      return execSh;
    }()
  }, {
    key: 'execNode',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(code) {
        var child;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _nodePromiseEs.childProcess.exec("node -e 'console.log(eval(process.env.code))'", {
                  cwd: this.path,
                  env: (0, _assign2.default)({}, process.env, { code: code })
                });

              case 2:
                child = _context2.sent;
                return _context2.abrupt('return', child.stdout.trim());

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function execNode(_x2) {
        return _ref2.apply(this, arguments);
      }

      return execNode;
    }()
  }, {
    key: 'chmod',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(childFileName, mode) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _nodePromiseEs.fs.chmod(this.join(childFileName), mode);

              case 2:
                return _context3.abrupt('return', _context3.sent);

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function chmod(_x3, _x4) {
        return _ref3.apply(this, arguments);
      }

      return chmod;
    }()
  }, {
    key: 'ls',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _nodePromiseEs.fs.readdir(this.path);

              case 2:
                return _context4.abrupt('return', _context4.sent);

              case 3:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function ls() {
        return _ref4.apply(this, arguments);
      }

      return ls;
    }()
  }, {
    key: 'readFile',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(childFileName) {
        var contents;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _nodePromiseEs.fs.readFile(this.join(childFileName), 'utf8');

              case 2:
                contents = _context5.sent;
                return _context5.abrupt('return', _path2.default.extname(childFileName) === '.json' ? JSON.parse(contents) : contents);

              case 4:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function readFile(_x5) {
        return _ref5.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: 'writeFile',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(childFileName, contents) {
        var childFilePath, childFileContents;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                childFilePath = this.join(childFileName);
                childFileContents = (typeof contents === 'undefined' ? 'undefined' : (0, _typeof3.default)(contents)) === 'object' ? (0, _stringify2.default)(contents) : contents;
                _context6.next = 4;
                return fse.remove(childFilePath);

              case 4:
                _context6.next = 6;
                return _nodePromiseEs.fs.writeFile(childFilePath, childFileContents);

              case 6:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function writeFile(_x6, _x7) {
        return _ref6.apply(this, arguments);
      }

      return writeFile;
    }()
  }, {
    key: 'cp',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(sourcePath, name) {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return fse.copy(_path2.default.resolve(sourcePath), this.join(name));

              case 2:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function cp(_x8, _x9) {
        return _ref7.apply(this, arguments);
      }

      return cp;
    }()
  }, {
    key: 'mkdir',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(childDirectoryName) {
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return _nodePromiseEs.fs.mkdir(this.join(childDirectoryName));

              case 3:
                _context8.next = 9;
                break;

              case 5:
                _context8.prev = 5;
                _context8.t0 = _context8['catch'](0);

                if (!(_context8.t0.code !== 'EEXIST')) {
                  _context8.next = 9;
                  break;
                }

                throw _context8.t0;

              case 9:
                return _context8.abrupt('return', new Directory(this.path, childDirectoryName));

              case 10:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this, [[0, 5]]);
      }));

      function mkdir(_x10) {
        return _ref8.apply(this, arguments);
      }

      return mkdir;
    }()
  }, {
    key: 'rm',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
        var childName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return fse.remove(this.join(childName));

              case 2:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function rm(_x11) {
        return _ref9.apply(this, arguments);
      }

      return rm;
    }()
  }]);
  return Directory;
}();

exports.default = Directory;